{"ast":null,"code":"/**\r\n * Google Drive API 서비스\r\n * 구글 드라이브 연동 및 폴더 정보 가져오기 기능을 제공합니다.\r\n */\n\nexport const loadGoogleDriveAPI = (clientId, apiKey, discoveryDocs, scopes) => {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.src = 'https://apis.google.com/js/api.js';\n    script.onload = () => {\n      window.gapi.load('client:auth2', () => {\n        window.gapi.client.init({\n          apiKey,\n          clientId,\n          discoveryDocs,\n          scope: scopes\n        }).then(() => {\n          resolve(true);\n        }).catch(error => {\n          console.error('Error initializing Google API client', error);\n          reject(error);\n        });\n      });\n    };\n    script.onerror = error => {\n      console.error('Error loading Google API script', error);\n      reject(new Error('Google API script failed to load'));\n    };\n\n    // Check if script is already loaded\n    if (document.querySelector('script[src=\"https://apis.google.com/js/api.js\"]')) {\n      // If already loaded, just init the client\n      if (window.gapi) {\n        window.gapi.load('client:auth2', () => {\n          window.gapi.client.init({\n            apiKey,\n            clientId,\n            discoveryDocs,\n            scope: scopes\n          }).then(() => {\n            resolve(true);\n          }).catch(error => {\n            console.error('Error initializing Google API client', error);\n            reject(error);\n          });\n        });\n      } else {\n        reject(new Error('Google API script loaded but gapi is not defined'));\n      }\n    } else {\n      document.body.appendChild(script);\n    }\n  });\n};\nexport const authenticateUser = () => {\n  return new Promise((resolve, reject) => {\n    try {\n      const authInstance = window.gapi.auth2.getAuthInstance();\n      if (!authInstance) {\n        reject(new Error('인증 인스턴스를 초기화하지 못했습니다.'));\n        return;\n      }\n      authInstance.signIn().then(() => {\n        resolve(true);\n      }).catch(error => {\n        console.error('로그인 중 오류 발생:', error);\n        reject(error);\n      });\n    } catch (error) {\n      console.error('인증 중 오류 발생:', error);\n      reject(error);\n    }\n  });\n};\nexport const signOut = () => {\n  return new Promise((resolve, reject) => {\n    try {\n      const authInstance = window.gapi.auth2.getAuthInstance();\n      authInstance.signOut().then(() => {\n        resolve(true);\n      }).catch(error => {\n        console.error('로그아웃 중 오류 발생:', error);\n        reject(error);\n      });\n    } catch (error) {\n      console.error('로그아웃 중 오류 발생:', error);\n      reject(error);\n    }\n  });\n};\nexport const getFolderContents = async folderId => {\n  try {\n    // 폴더 자체 정보 가져오기\n    const folderResponse = await window.gapi.client.drive.files.get({\n      fileId: folderId,\n      fields: 'id, name, mimeType'\n    });\n    const folderInfo = folderResponse.result;\n\n    // 폴더 내용 가져오기\n    let query = `'${folderId}' in parents and trashed = false`;\n    const response = await window.gapi.client.drive.files.list({\n      q: query,\n      fields: 'files(id, name, mimeType, iconLink)',\n      spaces: 'drive',\n      pageSize: 1000\n    });\n    const files = response.result.files || [];\n\n    // 폴더 자체 정보와 내용 합치기\n    return [folderInfo, ...files];\n  } catch (error) {\n    console.error('폴더 내용을 가져오는 중 오류 발생:', error);\n    throw error;\n  }\n};\nexport const getFileDetails = async fileId => {\n  try {\n    const response = await window.gapi.client.drive.files.get({\n      fileId: fileId,\n      fields: 'id, name, mimeType, iconLink, webViewLink, thumbnailLink, size, modifiedTime, createdTime',\n      supportsAllDrives: true\n    });\n    return response.result;\n  } catch (error) {\n    console.error('파일 상세 정보를 가져오는 중 오류 발생:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["loadGoogleDriveAPI","clientId","apiKey","discoveryDocs","scopes","Promise","resolve","reject","script","document","createElement","src","onload","window","gapi","load","client","init","scope","then","catch","error","console","onerror","Error","querySelector","body","appendChild","authenticateUser","authInstance","auth2","getAuthInstance","signIn","signOut","getFolderContents","folderId","folderResponse","drive","files","get","fileId","fields","folderInfo","result","query","response","list","q","spaces","pageSize","getFileDetails","supportsAllDrives"],"sources":["C:/Cursor/mindmap/src/services/googleDriveService.js"],"sourcesContent":["/**\r\n * Google Drive API 서비스\r\n * 구글 드라이브 연동 및 폴더 정보 가져오기 기능을 제공합니다.\r\n */\r\n\r\nexport const loadGoogleDriveAPI = (clientId, apiKey, discoveryDocs, scopes) => {\r\n  return new Promise((resolve, reject) => {\r\n    const script = document.createElement('script');\r\n    script.src = 'https://apis.google.com/js/api.js';\r\n    script.onload = () => {\r\n      window.gapi.load('client:auth2', () => {\r\n        window.gapi.client\r\n          .init({\r\n            apiKey,\r\n            clientId,\r\n            discoveryDocs,\r\n            scope: scopes,\r\n          })\r\n          .then(() => {\r\n            resolve(true);\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error initializing Google API client', error);\r\n            reject(error);\r\n          });\r\n      });\r\n    };\r\n    script.onerror = (error) => {\r\n      console.error('Error loading Google API script', error);\r\n      reject(new Error('Google API script failed to load'));\r\n    };\r\n\r\n    // Check if script is already loaded\r\n    if (document.querySelector('script[src=\"https://apis.google.com/js/api.js\"]')) {\r\n      // If already loaded, just init the client\r\n      if (window.gapi) {\r\n        window.gapi.load('client:auth2', () => {\r\n          window.gapi.client\r\n            .init({\r\n              apiKey,\r\n              clientId,\r\n              discoveryDocs,\r\n              scope: scopes,\r\n            })\r\n            .then(() => {\r\n              resolve(true);\r\n            })\r\n            .catch((error) => {\r\n              console.error('Error initializing Google API client', error);\r\n              reject(error);\r\n            });\r\n        });\r\n      } else {\r\n        reject(new Error('Google API script loaded but gapi is not defined'));\r\n      }\r\n    } else {\r\n      document.body.appendChild(script);\r\n    }\r\n  });\r\n};\r\n\r\nexport const authenticateUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const authInstance = window.gapi.auth2.getAuthInstance();\r\n      \r\n      if (!authInstance) {\r\n        reject(new Error('인증 인스턴스를 초기화하지 못했습니다.'));\r\n        return;\r\n      }\r\n\r\n      authInstance.signIn()\r\n        .then(() => {\r\n          resolve(true);\r\n        })\r\n        .catch((error) => {\r\n          console.error('로그인 중 오류 발생:', error);\r\n          reject(error);\r\n        });\r\n    } catch (error) {\r\n      console.error('인증 중 오류 발생:', error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\nexport const signOut = () => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const authInstance = window.gapi.auth2.getAuthInstance();\r\n      authInstance.signOut()\r\n        .then(() => {\r\n          resolve(true);\r\n        })\r\n        .catch((error) => {\r\n          console.error('로그아웃 중 오류 발생:', error);\r\n          reject(error);\r\n        });\r\n    } catch (error) {\r\n      console.error('로그아웃 중 오류 발생:', error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\nexport const getFolderContents = async (folderId) => {\r\n  try {\r\n    // 폴더 자체 정보 가져오기\r\n    const folderResponse = await window.gapi.client.drive.files.get({\r\n      fileId: folderId,\r\n      fields: 'id, name, mimeType'\r\n    });\r\n    \r\n    const folderInfo = folderResponse.result;\r\n    \r\n    // 폴더 내용 가져오기\r\n    let query = `'${folderId}' in parents and trashed = false`;\r\n    const response = await window.gapi.client.drive.files.list({\r\n      q: query,\r\n      fields: 'files(id, name, mimeType, iconLink)',\r\n      spaces: 'drive',\r\n      pageSize: 1000\r\n    });\r\n    \r\n    const files = response.result.files || [];\r\n    \r\n    // 폴더 자체 정보와 내용 합치기\r\n    return [folderInfo, ...files];\r\n  } catch (error) {\r\n    console.error('폴더 내용을 가져오는 중 오류 발생:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getFileDetails = async (fileId) => {\r\n  try {\r\n    const response = await window.gapi.client.drive.files.get({\r\n      fileId: fileId,\r\n      fields: 'id, name, mimeType, iconLink, webViewLink, thumbnailLink, size, modifiedTime, createdTime',\r\n      supportsAllDrives: true\r\n    });\r\n    \r\n    return response.result;\r\n  } catch (error) {\r\n    console.error('파일 상세 정보를 가져오는 중 오류 발생:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}