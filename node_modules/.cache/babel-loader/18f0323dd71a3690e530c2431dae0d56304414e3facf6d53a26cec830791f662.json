{"ast":null,"code":"/**\r\n * Google Drive API 서비스\r\n * 구글 드라이브 연동 및 폴더 정보 가져오기 기능을 제공합니다.\r\n */\n\nexport const loadGoogleDriveAPI = (clientId, apiKey, discoveryDocs, scopes) => {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.src = 'https://apis.google.com/js/api.js';\n    script.onload = () => {\n      window.gapi.load('client:auth2', () => {\n        console.log('Google API 클라이언트 초기화 시작...');\n        console.log('사용 중인 스코프:', scopes);\n        window.gapi.client.init({\n          apiKey,\n          clientId,\n          discoveryDocs,\n          scope: scopes\n        }).then(() => {\n          console.log('Google API 클라이언트 초기화 완료');\n\n          // auth2 인스턴스 확인\n          if (window.gapi.auth2.getAuthInstance()) {\n            console.log('인증 인스턴스가 성공적으로 생성되었습니다.');\n          } else {\n            console.warn('인증 인스턴스가 올바르게 설정되지 않았습니다.');\n          }\n          resolve(true);\n        }).catch(error => {\n          console.error('Google API 클라이언트 초기화 중 오류 발생:', error);\n          if (error && typeof error === 'object') {\n            console.error('오류 세부 정보:', JSON.stringify(error));\n          }\n          reject(error);\n        });\n      });\n    };\n    script.onerror = error => {\n      console.error('Google API 스크립트 로드 중 오류 발생:', error);\n      reject(new Error('Google API script failed to load'));\n    };\n\n    // Check if script is already loaded\n    if (document.querySelector('script[src=\"https://apis.google.com/js/api.js\"]')) {\n      // If already loaded, just init the client\n      if (window.gapi) {\n        window.gapi.load('client:auth2', () => {\n          console.log('이미 로드된 Google API 클라이언트 초기화 시작...');\n          window.gapi.client.init({\n            apiKey,\n            clientId,\n            discoveryDocs,\n            scope: scopes\n          }).then(() => {\n            console.log('이미 로드된 Google API 클라이언트 초기화 완료');\n            resolve(true);\n          }).catch(error => {\n            console.error('이미 로드된 Google API 클라이언트 초기화 중 오류 발생:', error);\n            if (error && typeof error === 'object') {\n              console.error('오류 세부 정보:', JSON.stringify(error));\n            }\n            reject(error);\n          });\n        });\n      } else {\n        console.error('Google API 스크립트가 로드되었지만 gapi가 정의되지 않았습니다.');\n        reject(new Error('Google API script loaded but gapi is not defined'));\n      }\n    } else {\n      document.body.appendChild(script);\n    }\n  });\n};\nexport const authenticateUser = () => {\n  return new Promise((resolve, reject) => {\n    try {\n      const authInstance = window.gapi.auth2.getAuthInstance();\n      if (!authInstance) {\n        console.error('인증 인스턴스가 초기화되지 않았습니다.');\n        reject(new Error('인증 인스턴스를 초기화하지 못했습니다.'));\n        return;\n      }\n\n      // 더 자세한 옵션으로 로그인 시도\n      authInstance.signIn({\n        scope: 'https://www.googleapis.com/auth/drive.metadata.readonly',\n        prompt: 'consent'\n      }).then(response => {\n        console.log('로그인 성공:', response);\n        resolve(true);\n      }).catch(error => {\n        console.error('로그인 중 상세 오류 발생:', error);\n        if (error && error.error) {\n          reject(new Error(error.error));\n        } else if (error && typeof error === 'object') {\n          reject(new Error(JSON.stringify(error)));\n        } else {\n          reject(error || new Error('알 수 없는 인증 오류'));\n        }\n      });\n    } catch (error) {\n      console.error('인증 시도 중 예외 발생:', error);\n      reject(error || new Error('인증 과정에서 예외가 발생했습니다.'));\n    }\n  });\n};\nexport const signOut = () => {\n  return new Promise((resolve, reject) => {\n    try {\n      const authInstance = window.gapi.auth2.getAuthInstance();\n      authInstance.signOut().then(() => {\n        resolve(true);\n      }).catch(error => {\n        console.error('로그아웃 중 오류 발생:', error);\n        reject(error);\n      });\n    } catch (error) {\n      console.error('로그아웃 중 오류 발생:', error);\n      reject(error);\n    }\n  });\n};\nexport const getFolderContents = async folderId => {\n  try {\n    // 폴더 자체 정보 가져오기\n    const folderResponse = await window.gapi.client.drive.files.get({\n      fileId: folderId,\n      fields: 'id, name, mimeType',\n      supportsAllDrives: true\n    });\n    const folderInfo = folderResponse.result;\n\n    // 폴더 내용 가져오기\n    let query = `'${folderId}' in parents and trashed = false`;\n    const response = await window.gapi.client.drive.files.list({\n      q: query,\n      fields: 'files(id, name, mimeType, iconLink)',\n      spaces: 'drive',\n      supportsAllDrives: true,\n      includeItemsFromAllDrives: true,\n      pageSize: 1000\n    });\n    const files = response.result.files || [];\n\n    // 폴더 자체 정보와 내용 합치기\n    return [folderInfo, ...files];\n  } catch (error) {\n    console.error('폴더 내용을 가져오는 중 오류 발생:', error);\n    throw error;\n  }\n};\nexport const getFileDetails = async fileId => {\n  try {\n    const response = await window.gapi.client.drive.files.get({\n      fileId: fileId,\n      fields: 'id, name, mimeType, iconLink, webViewLink, thumbnailLink, size, modifiedTime, createdTime',\n      supportsAllDrives: true\n    });\n    return response.result;\n  } catch (error) {\n    console.error('파일 상세 정보를 가져오는 중 오류 발생:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["loadGoogleDriveAPI","clientId","apiKey","discoveryDocs","scopes","Promise","resolve","reject","script","document","createElement","src","onload","window","gapi","load","console","log","client","init","scope","then","auth2","getAuthInstance","warn","catch","error","JSON","stringify","onerror","Error","querySelector","body","appendChild","authenticateUser","authInstance","signIn","prompt","response","signOut","getFolderContents","folderId","folderResponse","drive","files","get","fileId","fields","supportsAllDrives","folderInfo","result","query","list","q","spaces","includeItemsFromAllDrives","pageSize","getFileDetails"],"sources":["C:/Cursor/mindmap/src/services/googleDriveService.js"],"sourcesContent":["/**\r\n * Google Drive API 서비스\r\n * 구글 드라이브 연동 및 폴더 정보 가져오기 기능을 제공합니다.\r\n */\r\n\r\nexport const loadGoogleDriveAPI = (clientId, apiKey, discoveryDocs, scopes) => {\r\n  return new Promise((resolve, reject) => {\r\n    const script = document.createElement('script');\r\n    script.src = 'https://apis.google.com/js/api.js';\r\n    script.onload = () => {\r\n      window.gapi.load('client:auth2', () => {\r\n        console.log('Google API 클라이언트 초기화 시작...');\r\n        console.log('사용 중인 스코프:', scopes);\r\n        \r\n        window.gapi.client\r\n          .init({\r\n            apiKey,\r\n            clientId,\r\n            discoveryDocs,\r\n            scope: scopes,\r\n          })\r\n          .then(() => {\r\n            console.log('Google API 클라이언트 초기화 완료');\r\n            \r\n            // auth2 인스턴스 확인\r\n            if (window.gapi.auth2.getAuthInstance()) {\r\n              console.log('인증 인스턴스가 성공적으로 생성되었습니다.');\r\n            } else {\r\n              console.warn('인증 인스턴스가 올바르게 설정되지 않았습니다.');\r\n            }\r\n            \r\n            resolve(true);\r\n          })\r\n          .catch((error) => {\r\n            console.error('Google API 클라이언트 초기화 중 오류 발생:', error);\r\n            if (error && typeof error === 'object') {\r\n              console.error('오류 세부 정보:', JSON.stringify(error));\r\n            }\r\n            reject(error);\r\n          });\r\n      });\r\n    };\r\n    script.onerror = (error) => {\r\n      console.error('Google API 스크립트 로드 중 오류 발생:', error);\r\n      reject(new Error('Google API script failed to load'));\r\n    };\r\n\r\n    // Check if script is already loaded\r\n    if (document.querySelector('script[src=\"https://apis.google.com/js/api.js\"]')) {\r\n      // If already loaded, just init the client\r\n      if (window.gapi) {\r\n        window.gapi.load('client:auth2', () => {\r\n          console.log('이미 로드된 Google API 클라이언트 초기화 시작...');\r\n          window.gapi.client\r\n            .init({\r\n              apiKey,\r\n              clientId,\r\n              discoveryDocs,\r\n              scope: scopes,\r\n            })\r\n            .then(() => {\r\n              console.log('이미 로드된 Google API 클라이언트 초기화 완료');\r\n              resolve(true);\r\n            })\r\n            .catch((error) => {\r\n              console.error('이미 로드된 Google API 클라이언트 초기화 중 오류 발생:', error);\r\n              if (error && typeof error === 'object') {\r\n                console.error('오류 세부 정보:', JSON.stringify(error));\r\n              }\r\n              reject(error);\r\n            });\r\n        });\r\n      } else {\r\n        console.error('Google API 스크립트가 로드되었지만 gapi가 정의되지 않았습니다.');\r\n        reject(new Error('Google API script loaded but gapi is not defined'));\r\n      }\r\n    } else {\r\n      document.body.appendChild(script);\r\n    }\r\n  });\r\n};\r\n\r\nexport const authenticateUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const authInstance = window.gapi.auth2.getAuthInstance();\r\n      \r\n      if (!authInstance) {\r\n        console.error('인증 인스턴스가 초기화되지 않았습니다.');\r\n        reject(new Error('인증 인스턴스를 초기화하지 못했습니다.'));\r\n        return;\r\n      }\r\n\r\n      // 더 자세한 옵션으로 로그인 시도\r\n      authInstance.signIn({\r\n        scope: 'https://www.googleapis.com/auth/drive.metadata.readonly',\r\n        prompt: 'consent'\r\n      })\r\n        .then((response) => {\r\n          console.log('로그인 성공:', response);\r\n          resolve(true);\r\n        })\r\n        .catch((error) => {\r\n          console.error('로그인 중 상세 오류 발생:', error);\r\n          if (error && error.error) {\r\n            reject(new Error(error.error));\r\n          } else if (error && typeof error === 'object') {\r\n            reject(new Error(JSON.stringify(error)));\r\n          } else {\r\n            reject(error || new Error('알 수 없는 인증 오류'));\r\n          }\r\n        });\r\n    } catch (error) {\r\n      console.error('인증 시도 중 예외 발생:', error);\r\n      reject(error || new Error('인증 과정에서 예외가 발생했습니다.'));\r\n    }\r\n  });\r\n};\r\n\r\nexport const signOut = () => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const authInstance = window.gapi.auth2.getAuthInstance();\r\n      authInstance.signOut()\r\n        .then(() => {\r\n          resolve(true);\r\n        })\r\n        .catch((error) => {\r\n          console.error('로그아웃 중 오류 발생:', error);\r\n          reject(error);\r\n        });\r\n    } catch (error) {\r\n      console.error('로그아웃 중 오류 발생:', error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\nexport const getFolderContents = async (folderId) => {\r\n  try {\r\n    // 폴더 자체 정보 가져오기\r\n    const folderResponse = await window.gapi.client.drive.files.get({\r\n      fileId: folderId,\r\n      fields: 'id, name, mimeType',\r\n      supportsAllDrives: true\r\n    });\r\n    \r\n    const folderInfo = folderResponse.result;\r\n    \r\n    // 폴더 내용 가져오기\r\n    let query = `'${folderId}' in parents and trashed = false`;\r\n    const response = await window.gapi.client.drive.files.list({\r\n      q: query,\r\n      fields: 'files(id, name, mimeType, iconLink)',\r\n      spaces: 'drive',\r\n      supportsAllDrives: true,\r\n      includeItemsFromAllDrives: true,\r\n      pageSize: 1000\r\n    });\r\n    \r\n    const files = response.result.files || [];\r\n    \r\n    // 폴더 자체 정보와 내용 합치기\r\n    return [folderInfo, ...files];\r\n  } catch (error) {\r\n    console.error('폴더 내용을 가져오는 중 오류 발생:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getFileDetails = async (fileId) => {\r\n  try {\r\n    const response = await window.gapi.client.drive.files.get({\r\n      fileId: fileId,\r\n      fields: 'id, name, mimeType, iconLink, webViewLink, thumbnailLink, size, modifiedTime, createdTime',\r\n      supportsAllDrives: true\r\n    });\r\n    \r\n    return response.result;\r\n  } catch (error) {\r\n    console.error('파일 상세 정보를 가져오는 중 오류 발생:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}