{"ast":null,"code":"/**\r\n * Google Drive API 서비스\r\n * 구글 드라이브 연동 및 폴더 정보 가져오기 기능을 제공합니다.\r\n * Google Identity Service(GIS)를 사용한 최신 인증 방식 적용\r\n */\n\n// 구글 API 클라이언트 초기화\nexport const loadGoogleDriveAPI = (clientId, apiKey, discoveryDocs) => {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log('구글 API 초기화 시작...');\n\n      // 1. 먼저 gapi 스크립트 로드 및 초기화\n      loadGapiScript().then(() => {\n        return initializeGapiClient(apiKey, discoveryDocs);\n      }).then(() => {\n        console.log('GAPI 클라이언트 초기화 완료');\n        // 2. 그다음 GIS 클라이언트 로드 및 초기화\n        return loadGisScript();\n      }).then(() => {\n        initializeGisClient(clientId);\n        console.log('GIS 클라이언트 초기화 완료');\n        resolve(true);\n      }).catch(error => {\n        console.error('구글 API 초기화 중 오류 발생:', error);\n        reject(error);\n      });\n    } catch (error) {\n      console.error('API 초기화 중 예외 발생:', error);\n      reject(error);\n    }\n  });\n};\n\n// gapi 스크립트 로드\nconst loadGapiScript = () => {\n  return new Promise((resolve, reject) => {\n    if (window.gapi) {\n      resolve();\n      return;\n    }\n    const script = document.createElement('script');\n    script.src = 'https://apis.google.com/js/api.js';\n    script.onload = () => resolve();\n    script.onerror = e => reject(new Error('gapi 로드 실패: ' + e));\n    document.body.appendChild(script);\n  });\n};\n\n// GAPI 클라이언트 초기화\nconst initializeGapiClient = (apiKey, discoveryDocs) => {\n  return new Promise((resolve, reject) => {\n    window.gapi.load('client', async () => {\n      try {\n        await window.gapi.client.init({\n          apiKey: apiKey,\n          discoveryDocs: discoveryDocs\n        });\n        resolve();\n      } catch (error) {\n        console.error('GAPI 클라이언트 초기화 실패:', error);\n        reject(error);\n      }\n    });\n  });\n};\n\n// GIS 스크립트 로드\nconst loadGisScript = () => {\n  return new Promise((resolve, reject) => {\n    var _window$google, _window$google$accoun;\n    if ((_window$google = window.google) !== null && _window$google !== void 0 && (_window$google$accoun = _window$google.accounts) !== null && _window$google$accoun !== void 0 && _window$google$accoun.oauth2) {\n      resolve();\n      return;\n    }\n    const script = document.createElement('script');\n    script.src = 'https://accounts.google.com/gsi/client';\n    script.onload = () => resolve();\n    script.onerror = e => reject(new Error('GIS 로드 실패: ' + e));\n    document.body.appendChild(script);\n  });\n};\n\n// GIS 클라이언트 초기화\nconst initializeGisClient = clientId => {\n  window.tokenClient = window.google.accounts.oauth2.initTokenClient({\n    client_id: clientId,\n    scope: 'https://www.googleapis.com/auth/drive.metadata.readonly',\n    callback: '' // 콜백은 실제 요청 시 설정\n  });\n};\n\n// 사용자 인증하기\nexport const authenticateUser = () => {\n  return new Promise((resolve, reject) => {\n    try {\n      if (!window.tokenClient) {\n        reject(new Error('토큰 클라이언트가 초기화되지 않았습니다.'));\n        return;\n      }\n\n      // 콜백 설정\n      window.tokenClient.callback = response => {\n        if (response.error) {\n          console.error('인증 응답 오류:', response);\n          reject(new Error(response.error));\n          return;\n        }\n        console.log('인증 성공');\n        resolve(true);\n      };\n\n      // 토큰 요청\n      if (window.gapi.client.getToken() === null) {\n        // 사용자 동의 화면 표시\n        window.tokenClient.requestAccessToken({\n          prompt: 'consent'\n        });\n      } else {\n        // 이미 토큰이 있으면 소리 없이 갱신\n        window.tokenClient.requestAccessToken({\n          prompt: ''\n        });\n      }\n    } catch (error) {\n      console.error('인증 중 오류 발생:', error);\n      reject(error);\n    }\n  });\n};\n\n// 로그아웃\nexport const signOut = () => {\n  return new Promise(resolve => {\n    const token = window.gapi.client.getToken();\n    if (token !== null) {\n      google.accounts.oauth2.revoke(token.access_token, () => {\n        window.gapi.client.setToken('');\n        resolve(true);\n      });\n    } else {\n      resolve(true);\n    }\n  });\n};\n\n// 폴더 내용 가져오기\nexport const getFolderContents = async folderId => {\n  try {\n    // 폴더 자체 정보 가져오기\n    const folderResponse = await window.gapi.client.drive.files.get({\n      fileId: folderId,\n      fields: 'id, name, mimeType',\n      supportsAllDrives: true\n    });\n    const folderInfo = folderResponse.result;\n\n    // 폴더 내용 가져오기\n    let query = `'${folderId}' in parents and trashed = false`;\n    const response = await window.gapi.client.drive.files.list({\n      q: query,\n      fields: 'files(id, name, mimeType, iconLink)',\n      spaces: 'drive',\n      supportsAllDrives: true,\n      includeItemsFromAllDrives: true,\n      pageSize: 1000\n    });\n    const files = response.result.files || [];\n\n    // 폴더 자체 정보와 내용 합치기\n    return [folderInfo, ...files];\n  } catch (error) {\n    console.error('폴더 내용을 가져오는 중 오류 발생:', error);\n    throw error;\n  }\n};\n\n// 파일 상세 정보 가져오기\nexport const getFileDetails = async fileId => {\n  try {\n    const response = await window.gapi.client.drive.files.get({\n      fileId: fileId,\n      fields: 'id, name, mimeType, iconLink, webViewLink, thumbnailLink, size, modifiedTime, createdTime',\n      supportsAllDrives: true\n    });\n    return response.result;\n  } catch (error) {\n    console.error('파일 상세 정보를 가져오는 중 오류 발생:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["loadGoogleDriveAPI","clientId","apiKey","discoveryDocs","Promise","resolve","reject","console","log","loadGapiScript","then","initializeGapiClient","loadGisScript","initializeGisClient","catch","error","window","gapi","script","document","createElement","src","onload","onerror","e","Error","body","appendChild","load","client","init","_window$google","_window$google$accoun","google","accounts","oauth2","tokenClient","initTokenClient","client_id","scope","callback","authenticateUser","response","getToken","requestAccessToken","prompt","signOut","token","revoke","access_token","setToken","getFolderContents","folderId","folderResponse","drive","files","get","fileId","fields","supportsAllDrives","folderInfo","result","query","list","q","spaces","includeItemsFromAllDrives","pageSize","getFileDetails"],"sources":["C:/Cursor/mindmap/src/services/googleDriveService.js"],"sourcesContent":["/**\r\n * Google Drive API 서비스\r\n * 구글 드라이브 연동 및 폴더 정보 가져오기 기능을 제공합니다.\r\n * Google Identity Service(GIS)를 사용한 최신 인증 방식 적용\r\n */\r\n\r\n// 구글 API 클라이언트 초기화\r\nexport const loadGoogleDriveAPI = (clientId, apiKey, discoveryDocs) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      console.log('구글 API 초기화 시작...');\r\n\r\n      // 1. 먼저 gapi 스크립트 로드 및 초기화\r\n      loadGapiScript()\r\n        .then(() => {\r\n          return initializeGapiClient(apiKey, discoveryDocs);\r\n        })\r\n        .then(() => {\r\n          console.log('GAPI 클라이언트 초기화 완료');\r\n          // 2. 그다음 GIS 클라이언트 로드 및 초기화\r\n          return loadGisScript();\r\n        })\r\n        .then(() => {\r\n          initializeGisClient(clientId);\r\n          console.log('GIS 클라이언트 초기화 완료');\r\n          resolve(true);\r\n        })\r\n        .catch((error) => {\r\n          console.error('구글 API 초기화 중 오류 발생:', error);\r\n          reject(error);\r\n        });\r\n    } catch (error) {\r\n      console.error('API 초기화 중 예외 발생:', error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// gapi 스크립트 로드\r\nconst loadGapiScript = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (window.gapi) {\r\n      resolve();\r\n      return;\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.src = 'https://apis.google.com/js/api.js';\r\n    script.onload = () => resolve();\r\n    script.onerror = (e) => reject(new Error('gapi 로드 실패: ' + e));\r\n    document.body.appendChild(script);\r\n  });\r\n};\r\n\r\n// GAPI 클라이언트 초기화\r\nconst initializeGapiClient = (apiKey, discoveryDocs) => {\r\n  return new Promise((resolve, reject) => {\r\n    window.gapi.load('client', async () => {\r\n      try {\r\n        await window.gapi.client.init({\r\n          apiKey: apiKey,\r\n          discoveryDocs: discoveryDocs,\r\n        });\r\n        resolve();\r\n      } catch (error) {\r\n        console.error('GAPI 클라이언트 초기화 실패:', error);\r\n        reject(error);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// GIS 스크립트 로드\r\nconst loadGisScript = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (window.google?.accounts?.oauth2) {\r\n      resolve();\r\n      return;\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.src = 'https://accounts.google.com/gsi/client';\r\n    script.onload = () => resolve();\r\n    script.onerror = (e) => reject(new Error('GIS 로드 실패: ' + e));\r\n    document.body.appendChild(script);\r\n  });\r\n};\r\n\r\n// GIS 클라이언트 초기화\r\nconst initializeGisClient = (clientId) => {\r\n  window.tokenClient = window.google.accounts.oauth2.initTokenClient({\r\n    client_id: clientId,\r\n    scope: 'https://www.googleapis.com/auth/drive.metadata.readonly',\r\n    callback: '', // 콜백은 실제 요청 시 설정\r\n  });\r\n};\r\n\r\n// 사용자 인증하기\r\nexport const authenticateUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      if (!window.tokenClient) {\r\n        reject(new Error('토큰 클라이언트가 초기화되지 않았습니다.'));\r\n        return;\r\n      }\r\n\r\n      // 콜백 설정\r\n      window.tokenClient.callback = (response) => {\r\n        if (response.error) {\r\n          console.error('인증 응답 오류:', response);\r\n          reject(new Error(response.error));\r\n          return;\r\n        }\r\n        console.log('인증 성공');\r\n        resolve(true);\r\n      };\r\n\r\n      // 토큰 요청\r\n      if (window.gapi.client.getToken() === null) {\r\n        // 사용자 동의 화면 표시\r\n        window.tokenClient.requestAccessToken({ prompt: 'consent' });\r\n      } else {\r\n        // 이미 토큰이 있으면 소리 없이 갱신\r\n        window.tokenClient.requestAccessToken({ prompt: '' });\r\n      }\r\n    } catch (error) {\r\n      console.error('인증 중 오류 발생:', error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// 로그아웃\r\nexport const signOut = () => {\r\n  return new Promise((resolve) => {\r\n    const token = window.gapi.client.getToken();\r\n    if (token !== null) {\r\n      google.accounts.oauth2.revoke(token.access_token, () => {\r\n        window.gapi.client.setToken('');\r\n        resolve(true);\r\n      });\r\n    } else {\r\n      resolve(true);\r\n    }\r\n  });\r\n};\r\n\r\n// 폴더 내용 가져오기\r\nexport const getFolderContents = async (folderId) => {\r\n  try {\r\n    // 폴더 자체 정보 가져오기\r\n    const folderResponse = await window.gapi.client.drive.files.get({\r\n      fileId: folderId,\r\n      fields: 'id, name, mimeType',\r\n      supportsAllDrives: true\r\n    });\r\n    \r\n    const folderInfo = folderResponse.result;\r\n    \r\n    // 폴더 내용 가져오기\r\n    let query = `'${folderId}' in parents and trashed = false`;\r\n    const response = await window.gapi.client.drive.files.list({\r\n      q: query,\r\n      fields: 'files(id, name, mimeType, iconLink)',\r\n      spaces: 'drive',\r\n      supportsAllDrives: true,\r\n      includeItemsFromAllDrives: true,\r\n      pageSize: 1000\r\n    });\r\n    \r\n    const files = response.result.files || [];\r\n    \r\n    // 폴더 자체 정보와 내용 합치기\r\n    return [folderInfo, ...files];\r\n  } catch (error) {\r\n    console.error('폴더 내용을 가져오는 중 오류 발생:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 파일 상세 정보 가져오기\r\nexport const getFileDetails = async (fileId) => {\r\n  try {\r\n    const response = await window.gapi.client.drive.files.get({\r\n      fileId: fileId,\r\n      fields: 'id, name, mimeType, iconLink, webViewLink, thumbnailLink, size, modifiedTime, createdTime',\r\n      supportsAllDrives: true\r\n    });\r\n    \r\n    return response.result;\r\n  } catch (error) {\r\n    console.error('파일 상세 정보를 가져오는 중 오류 발생:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}